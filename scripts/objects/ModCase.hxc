import funkin.audio.FunkinSound;
import funkin.modding.base.ScriptedFlxSpriteGroup;
import funkin.modding.module.ModuleHandler;
import funkin.util.tools.ArrayTools;

import flixel.FlxSprite;
import flixel.addons.effects.FlxSkewedSprite;
import flixel.group.FlxTypedSpriteGroup;
import flixel.math.FlxPoint;
import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;

import StringTools;

class ModCase extends ScriptedFlxSpriteGroup
{
  var ModMenuUtils = ModuleHandler.getModule("ModMenuUtils")._asc;

  var caseSprite:FlxSprite;
  var buttonSprite:FlxSprite;
  var favSprite:FlxSprite;

  var pressOffsetGroup:FlxTypedSpriteGroup;

  var metadata:ModMetadata;
  var favorited:Bool = false;

  function new(_x, _y, ?_meta:ModMetadata)
  {
    super(_x, _y);
    this.setPosition(_x, _y);
    metadata = _meta;

    var colorBg:FlxSkewedSprite = new FlxSkewedSprite(634, 7);
    colorBg.makeGraphic(109, 107, 0xffFFDFD3);
    colorBg.skew.set(22,0);
    this.add(colorBg);

    var modIcon:FlxSkewedSprite = new FlxSkewedSprite(634,7).loadGraphic(ModMenuUtils.getModIcon(metadata));
    modIcon.setGraphicSize(109, 107);
    modIcon.updateHitbox();
    modIcon.skew.set(22,0);
    this.add(modIcon);

    caseSprite = new FlxSprite(0, 0);
    caseSprite.frames = Paths.getSparrowAtlas("modmenu/modCase");
    caseSprite.animation.addByPrefix("press", "casePress", 24, false);
    caseSprite.animation.addByPrefix("idle", "caseIdle", 24, true);
    caseSprite.animation.addByPrefix("dim", "caseDimmed", 24, true);
    caseSprite.animation.onFinish.add((name)-> {
      if(name == "press") caseSprite.animation.play("idle");
    });
    caseSprite.animation.play("dim");
    this.add(caseSprite);

    buttonSprite = new FlxSprite(0, 0);
    buttonSprite.frames = Paths.getSparrowAtlas("modmenu/modCase");
    buttonSprite.animation.addByPrefix("enabled", "lightEnable0", 24, false);
    buttonSprite.animation.addByPrefix("loopEnabled", "lightEnableLoop", 24, true);
    buttonSprite.animation.addByPrefix("disabled", "lightDisable0", 24, false);
    buttonSprite.animation.addByPrefix("loopDisabled", "lightDisableLoop", 24, true);
    buttonSprite.animation.addByPrefix("missingDependencies", "lightMissingDependancies0", 24, true);
    buttonSprite.animation.onFinish.add((name)-> {
      switch(name)
      {
        case "enabled":
            buttonSprite.animation.play("loopEnabled");
            pressOffsetGroup.y = 0;
        case "disabled":
            buttonSprite.animation.play("loopDisabled");
            pressOffsetGroup.y = 0;
      }
    });
    buttonSprite.animation.play((ModMenuUtils.isModEnabled(metadata)) ? "loopEnabled":"loopDisabled");
    if(ModMenuUtils.isModMissingDependencies(metadata)) buttonSprite.animation.play("missingDependencies");
    this.add(buttonSprite);

    favSprite = new FlxSprite(0, 0);
    favSprite.frames = Paths.getSparrowAtlas("modmenu/modCase");
    favSprite.animation.addByPrefix("favorite", "favourite0", 24, false);
    // favSprite.animation.addByPrefix("pressFavorite", "favouritePress", 24, false);
    favSprite.animation.addByPrefix("loopFavorite", "favouriteLoop", 24, true);
    favSprite.animation.addByPrefix("unfavorite", "unFavourite0", 24, false);
    // favSprite.animation.addByPrefix("pressUnfavorite", "unFavouritePress", 24, false);
    favSprite.animation.addByPrefix("loopUnfavorite", "unFavouriteLoop", 24, true);
    favSprite.animation.play((ModMenuUtils.isModFavorited(metadata)) ? "loopFavorite":"loopUnfavorite");
    this.add(favSprite);

    var modTitle:FlxText = new FlxText(100, 63, 590, " " + metadata.title, 42);
    modTitle.font = "Letterstuff Regular";
    modTitle.color = 0xffFFFFFF;
    modTitle.borderColor = 0xff5F91C1;
    modTitle.borderSize = 3;
    modTitle.borderStyle = FlxTextBorderStyle.OUTLINE;
    modTitle.bold = true;
    if (modTitle.text.length > 18)
      modTitle.text = modTitle.text.substring(0, 18) + "-";
    add(modTitle);

    var modAuthors:FlxText = new FlxText(110, 11, 590, "", 32);
    var contributors = [];
    if(metadata._author != null && metadata._author != "") ArrayTools.pushUnique(contributors, metadata._author);
    if(metadata.contributors != null)
    {
      for(contributor in metadata.contributors)
      {
        ArrayTools.pushUnique(contributors, contributor.name);
      }
    }
    modAuthors.text = contributors.join(", ");
    modAuthors.font = "Tardling Solid Regular";
    modAuthors.borderColor = 0xff3D7DFF;
    modAuthors.borderSize = 2;
    modAuthors.borderStyle = FlxTextBorderStyle.OUTLINE;
    modAuthors.blend = 0;
    if (modAuthors.text.length > 26) modAuthors.text = modAuthors.text.substring(0, 26) + "...";
    add(modAuthors);

    if(ModMenuUtils.isModNew(metadata))
    {
      newNotifSprite = new FlxSprite(caseSprite.width - 176, -20);
      newNotifSprite.frames = Paths.getSparrowAtlas("freeplay/freeplayCapsule/new");
      newNotifSprite.animation.addByPrefix("idle", "NEW notif", 24, true);
      newNotifSprite.animation.play("idle");
      this.add(newNotifSprite);
    }

    pressOffsetGroup = new FlxTypedSpriteGroup(0,0,0);
    for(object in [colorBg, modIcon, favSprite, modTitle, modAuthors])
    {
        pressOffsetGroup.add(object);
    }
  }

  override function update(elapsed:Float):Void
  {
    super.update(elapsed);
  }

  function toggleMod()
  {
    ModMenuUtils.toggleMod(metadata);
    caseSprite.animation.play("press");
    buttonSprite.animation.play((ModMenuUtils.isModEnabled(metadata)) ? "enabled":"disabled");
    pressOffsetGroup.y = 4;
    FunkinSound.playOnce(Paths.sound(((ModMenuUtils.isModEnabled(metadata)) ? "modEnable":"modDisabled")));
  }

  function toggleFavorite()
  {
    ModMenuUtils.toggleFavorite(metadata);
    favSprite.animation.play((ModMenuUtils.isModFavorited(metadata)) ? "favorite":"unfavorite");
    FunkinSound.playOnce(Paths.sound(((ModMenuUtils.isModFavorited(metadata)) ? "fav":"unfav")));
  }
}
