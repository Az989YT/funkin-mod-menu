import funkin.modding.PolymodHandler;
import funkin.modding.base.ScriptedFlxSpriteGroup;

import flixel.FlxG;
import flixel.FlxSprite;
import flixel.addons.display.FlxRuntimeShader;
import flixel.addons.effects.FlxSkewedSprite;
import flixel.graphics.FlxGraphic;
import flixel.math.FlxPoint;
import flixel.text.FlxText;
import flixel.text.FlxTextFormat;
import flixel.text.FlxTextBorderStyle;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;

import haxe.Unserializer;

import openfl.display.BitmapData;

import polymod.Polymod;

class FullModCase extends ScriptedFlxSpriteGroup {

  var caseSprite:FlxSprite;

  var metadata:ModMetadata;
  var modTitle:FlxText;
  var modAuthors:FlxText;
  var modIcon:FlxSprite;
  var modDescription:FlxText;

  var fileSystem:Dynamic;

	public function new(?meta:ModMetadata = null)
  {
		super("FullModCase");

    metadata = meta;
    trace(meta);

    // FileSystem workaround! (found from https://github.com/Burgerballs/ModBootstrap/, thank you SO much vro)
    fileSystem = Unserializer.DEFAULT_RESOLVER.resolveClass('sys.FileSystem');

    caseSprite = new FlxSprite(0, 0).loadGraphic(Paths.image("modmenu/modCaseFull"));
    add(caseSprite);

    modTitle = new FlxText(10 , 61, 729, "Mod Name", 32);
    if (metadata != null) modTitle.text = " " + metadata.title;
    modTitle.font = "Pixel Arial 11";
    modTitle.borderColor = 0xff5F91C1;
    modTitle.borderSize = 5;
    modTitle.borderStyle = FlxTextBorderStyle.OUTLINE;
    modTitle.bold = true;
    //if (modTitle.text.length > 16) modTitle.text = modTitle.text.substring(0, 16) + "...";
    add(modTitle);

    modAuthors = new FlxText(271 - 12.5, 220 - 12.5, 469, "Author One - Programming \n\nAuthor Two - Art \n\nAuthor Three - Music", 18);
    if (metadata != null) {
      modAuthors.text = "";
      if(metadata.contributors != null) {
        for (contributor in 0...metadata.contributors.length) {
          if (contributor == metadata.contributors.length-1) { modAuthors.text += metadata.contributors[contributor].name + " - " + metadata.contributors[contributor].role; }
          else { modAuthors.text += metadata.contributors[contributor].name + " - " + metadata.contributors[contributor].role + "\n\n"; }
        }
      } else {
        modAuthors.text = metadata._author;
      }
    }
    modAuthors.font = "Pixel Arial 11";
    modAuthors.color = 0xff5F91C1;
    // modAuthors.borderColor = 0xff85c5d0;
    // modAuthors.borderSize = 3;
    // modAuthors.borderStyle = FlxTextBorderStyle.OUTLINE;
    modAuthors.bold = true;
    //if (modAuthors.text.length > 26) modAuthors.text = modAuthors.text.substring(0, 26) + "...";
    add(modAuthors);

    modIcon = new FlxSprite(0,121).loadGraphic(Paths.image("modmenu/no_icon"));
    if (metadata != null) {
      var iconPath = "mods/" + metadata.id + "/_polymod_icon.png";
      //trace(iconPath);
      if (fileSystem.exists(iconPath)) {
        var modIconBitmap:BitmapData = BitmapData.fromFile(iconPath);
        modIcon.loadGraphic(FlxGraphic.fromBitmapData(modIconBitmap, false, iconPath));
      }
    }
    modIcon.setGraphicSize(241, 241);
    modIcon.updateHitbox();
    add(modIcon);
    // modIcon.shader = new FlxRuntimeShader(Assets.getText(Paths.frag('bevelImage')));

    modDescription = new FlxText(12.5, 134 + modIcon.height, 241 - 25, "Mod description here. this might be really long, or really short. maybe people will be lazy and not put one at all. oh well!", 18);
    if (metadata != null) modDescription.text = metadata.description;
    modDescription.font = "Pixel Arial 11";
    modDescription.color = 0xffed99b0;
    // modDescription.borderSize = 3;
    // modDescription.borderStyle = FlxTextBorderStyle.OUTLINE;
    modDescription.bold = true;
    add(modDescription);
	}

  override function update(elapsed:Float):Void
  {
    super.update(elapsed);
  }

  public function updateMetadata()
  {
    if (metadata != null)
    {
      modTitle.text = " " + metadata.title;

      modAuthors.text = "";
      if(metadata.contributors != null) {
        for (contributor in 0...metadata.contributors.length) {
          if (contributor == metadata.contributors.length-1) { modAuthors.text += metadata.contributors[contributor].name + ": \n" + metadata.contributors[contributor].role; }
          else { modAuthors.text += metadata.contributors[contributor].name + ": \n" + metadata.contributors[contributor].role + "\n\n"; }
        }
      } else {
        modAuthors.text = metadata._author;
      }

      modDescription.text = metadata.description;

      modIcon.loadGraphic(Paths.image("modmenu/no_icon"));
      var iconPath = "mods/" + metadata.id + "/_polymod_icon.png";
      //trace(iconPath);
      if (fileSystem.exists(iconPath)) {
        var modIconBitmap:BitmapData = BitmapData.fromFile(iconPath);
        modIcon.loadGraphic(FlxGraphic.fromBitmapData(modIconBitmap, false, iconPath));
      }
      modIcon.setGraphicSize(241, 241);
      modIcon.updateHitbox();
    }
  }
}
