import funkin.modding.PolymodHandler;
import funkin.modding.module.Module;
import funkin.util.FileUtil;
import funkin.util.FileWriteMode;

import flixel.graphics.FlxGraphic;

import openfl.display.BitmapData;
import openfl.utils.ByteArrayData;

// IMPORTS FOR ASSET RELOADING
import funkin.data.dialogue.conversation.ConversationRegistry;
import funkin.data.dialogue.dialoguebox.DialogueBoxRegistry;
import funkin.data.dialogue.speaker.SpeakerRegistry;
import funkin.data.event.SongEventRegistry;
import funkin.data.story.level.LevelRegistry;
import funkin.data.notestyle.NoteStyleRegistry;
import funkin.play.notes.notekind.NoteKindManager;
import funkin.data.song.SongRegistry;
import funkin.data.freeplay.player.PlayerRegistry;
import funkin.data.stage.StageRegistry;
import funkin.play.character.CharacterDataParser;
import funkin.data.freeplay.album.AlbumRegistry;
import funkin.modding.module.ModuleHandler;

class ModMenuUtils extends Module
{
  // USEFUL VARIABLES
  var modMenuID = "Funkin' Mod Menu";
  var registeredModsPath = "mods/Funkin' Mod Menu/registeredMods/";
  var registeredModFileExtension = ".fmm";
  var modMenuIsZIP = false;

  var detectedMods = PolymodHandler.getAllMods();

  public function new()
  {
    super('ModMenuUtils');

    trace("Mod Menu Utils Initialized.");

    for(mod in 0...detectedMods.length)
    {
      if(detectedMods[mod].title == modMenuID)
      {
        FoundModMenuPath = true;
        modMenuID = detectedMods[mod].id;
        registeredModsPath = "mods/" + modMenuID + "/registeredMods/";

        if(FileUtil.pathExists("mods/" + modMenuID + ".zip"))
        {
          modMenuIsZIP = true;
          break;
        }

        trace("Found Menu Path, Mod Menu ID = " + modMenuID + ", Registered Mods Path = " + registeredModsPath, ", Mod Menu is ZIP = " + modMenuIsZIP);

        FileUtil.createDirIfNotExists(registeredModsPath);

        break;
      }
    }
  }

  public function getModIcon(mod:ModMetadata)
  {
    if(mod == null || mod.icon == null)
      return Paths.image("modmenu/no_icon");

      return (FlxGraphic.fromBitmapData(BitmapData.fromBytes(ByteArrayData.fromBytes(mod.icon)), false));
  }

  public function toggleMod(mod:ModMetadata, enabled:Bool)
  {
    var modPath = registeredModsPath + mod.id + registeredModFileExtension;
    FileUtil.writeStringToPath(modPath, enabled, FileWriteMode.Force);
  }

  public function isModEnabled(mod:ModMetadata)
  {
    var modPath = registeredModsPath + mod.id + registeredModFileExtension;
    if (FileUtil.pathExists(modPath))
    {
      trace("Mod FMM File Found.");

      if(FileUtil.readStringFromPath(modPath) == "false")
        return false;

        return true;
    }
    else
    {
      trace("Mod FMM File Not Found. Writing File to: " + modPath);
      FileUtil.writeStringToPath(modPath, "true", FileWriteMode.Force);
      return true;
    }
  }

  public function isModNew(mod:ModMetadata)
  {
    var modPath = registeredModsPath + mod.id + registeredModFileExtension;
    if (FileUtil.pathExists(modPath))
      return false;

      return true;
  }

  public function loadEnabledMods()
  {
    var modsToLoad = [];
    for(mod in detectedMods)
    {
      if(isModEnabled(mod))
        modsToLoad.push(mod.id);
    }

    if(modsToLoad.length > 0)
    {
      trace("Loading Mods: " + modsToLoad.join(", "));
      PolymodHandler.loadModsById(modsToLoad);
    }
    else
    {
      trace("No Mods Enabled, Loading All Mods.");
      PolymodHandler.loadAllMods();
    }

    ModuleHandler.clearModuleCache();

    // Polymod.clearScripts();
    // Polymod.registerAllScriptClasses();

    SongEventRegistry.loadEventCache();

    SongRegistry.instance.loadEntries();
    LevelRegistry.instance.loadEntries();
    NoteStyleRegistry.instance.loadEntries();
    PlayerRegistry.instance.loadEntries();
    ConversationRegistry.instance.loadEntries();
    DialogueBoxRegistry.instance.loadEntries();
    SpeakerRegistry.instance.loadEntries();
    AlbumRegistry.instance.loadEntries();
    StageRegistry.instance.loadEntries();

    CharacterDataParser.loadCharacterCache();
    NoteKindManager.loadScripts();
    ModuleHandler.loadModuleCache();

    trace("Mod Loading Completed.");
  }
}
