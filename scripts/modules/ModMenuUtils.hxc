import funkin.modding.PolymodHandler;
import funkin.modding.module.Module;
import funkin.save.Save;
import funkin.util.VersionUtil;

import flixel.graphics.FlxGraphic;

import openfl.display.BitmapData;
import openfl.utils.ByteArrayData;

// IMPORTS FOR ASSET RELOADING
import funkin.data.dialogue.conversation.ConversationRegistry;
import funkin.data.dialogue.dialoguebox.DialogueBoxRegistry;
import funkin.data.dialogue.speaker.SpeakerRegistry;
import funkin.data.event.SongEventRegistry;
import funkin.data.story.level.LevelRegistry;
import funkin.data.notestyle.NoteStyleRegistry;
import funkin.play.notes.notekind.NoteKindManager;
import funkin.data.song.SongRegistry;
import funkin.data.freeplay.player.PlayerRegistry;
import funkin.data.stage.StageRegistry;
import funkin.play.character.CharacterDataParser;
import funkin.data.freeplay.album.AlbumRegistry;
import funkin.modding.module.ModuleHandler;

class ModMenuUtils extends Module
{
    var modMenuID = "Funkin' Mod Menu";
    var modMenuSaveInstance = Save.instance.modOptions.get("Funkin' Mod Menu");
    var modMenuSaveData = [
        "mod-id" => {
        enabled: true,
        favorited: false
        }
    ];

    var detectedMods = PolymodHandler.getAllMods();
    var detectedModIds = PolymodHandler.getAllModIds();

    public function new()
    {
        super('ModMenuUtils');

        trace("Mod Menu Utils Initialized.");

        for(mod in detectedMods)
        {
            if(mod.title == modMenuID)
            {
                modMenuID = mod.id;
                break;
            }
        }

        modMenuSaveData.clear();
        if(modMenuSaveInstance == null)
        {
            trace("No Funkin' Mod Menu Save Data; Generating Save Data.");
            for(mod in detectedMods)
            {
                modMenuSaveData.set(mod.id, { enabled: true, favorited: false });
            }
        }
        else
        {
            trace("Funkin' Mod Menu Save Data Found; Appending New Mods.");
            modMenuSaveData = modMenuSaveInstance;
            for(mod in detectedMods)
            {
                if(!modMenuSaveData.exists(mod.id))
                {
                    trace("Appending Mod ID: " + mod.id);
                    modMenuSaveData.set(mod.id, { enabled: true, favorited: false });
                }
            }
        }
        Save.instance.modOptions.set("Funkin' Mod Menu", modMenuSaveData);
        trace(modMenuSaveInstance);
    }

    public function getModIcon(mod:ModMetadata)
    {
        if(mod == null || mod.icon == null)
            return Paths.image("modmenu/no_icon");

        return (FlxGraphic.fromBitmapData(BitmapData.fromBytes(ByteArrayData.fromBytes(mod.icon)), false));
    }

    public function toggleMod(mod:ModMetadata)
    {
        if(modMenuSaveInstance.exists(mod.id))
        {
            modMenuSaveInstance.get(mod.id).enabled = !modMenuSaveInstance.get(mod.id).enabled;
            trace("Mod Toggle Status Updated; " + modMenuSaveInstance.get(mod.id).enabled);
        }
    }

    public function isModEnabled(mod:ModMetadata)
    {
        if(modMenuSaveInstance.exists(mod.id))
        {
            // trace("Mod Toggle Status Found; " + modMenuSaveInstance.get(mod.id).enabled);
            return modMenuSaveInstance.get(mod.id).enabled;
        }
        return true;
    }

    public function toggleFavorite(mod:ModMetadata)
    {
        if(modMenuSaveInstance.exists(mod.id))
        {
            modMenuSaveInstance.get(mod.id).favorited = !modMenuSaveInstance.get(mod.id).favorited;
            trace("Mod Favorite Status Updated; " + modMenuSaveInstance.get(mod.id).favorited);
        }
    }

    public function isModFavorited(mod:ModMetadata)
    {
        if(modMenuSaveInstance.exists(mod.id))
        {
            // trace("Mod Favorite Status Found; " + modMenuSaveInstance.get(mod.id).favorited);
            return modMenuSaveInstance.get(mod.id).favorited;
        }
        return true;
    }

    public function isModNew(mod:ModMetadata)
    {
        if(!modMenuSaveInstance.exists(mod.id))
        {
            return true;
        }
        return false;
    }

    public function isModMissingDependencies(mod:ModMetadata)
    {
        if(mod.dependencies == null) return false;
        var missingDependencies = [];
        for(dependency in mod.dependencies.keys())
        {
            if(detectedModIds.contains(dependency))
            {
                if(!VersionUtil.validateVersion(detectedMods[detectedModIds.indexOf(dependency)].modVersion, mod.dependencies.get(dependency)))
                {
                    missingDependencies.push(dependency);
                }
            }
            else
            {
                missingDependencies.push(dependency);
            }
        }
        if(missingDependencies.length > 0)
        {
            return true;
        }
        return false;
    }

    public function loadEnabledMods() // NOTE: NO LONGER ABLE TO 100% REPLICATE RELOAD FUNCTIONALITY. POLYMOD CLASS IS BLACKLISTED.
    {
        var modsToLoad = [];
        for(mod in detectedMods)
        {
            if(isModEnabled(mod))
                modsToLoad.push(mod.id);
        }

        if(modsToLoad.length > 0)
        {
            trace("Loading Mods: " + modsToLoad.join(", "));
            PolymodHandler.loadModsById(modsToLoad);
        }
        else
        {
            trace("No Mods Enabled, Loading All Mods.");
            PolymodHandler.loadAllMods();
        }

        ModuleHandler.clearModuleCache();

        // Polymod.clearScripts();
        // Polymod.registerAllScriptClasses();

        SongEventRegistry.loadEventCache();

        SongRegistry.instance.loadEntries();
        LevelRegistry.instance.loadEntries();
        NoteStyleRegistry.instance.loadEntries();
        PlayerRegistry.instance.loadEntries();
        ConversationRegistry.instance.loadEntries();
        DialogueBoxRegistry.instance.loadEntries();
        SpeakerRegistry.instance.loadEntries();
        AlbumRegistry.instance.loadEntries();
        StageRegistry.instance.loadEntries();

        CharacterDataParser.loadCharacterCache();
        NoteKindManager.loadScripts();
        ModuleHandler.loadModuleCache();

        trace("Mod Loading Completed.");
    }
}
